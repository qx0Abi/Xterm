local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Xterm Break Bones",
   Icon = 0,
   LoadingTitle = "Xterm BB",
   LoadingSubtitle = "by qx0_",
   ShowText = "Xterm BB",
   Theme = "Default",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Xterm"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local MainTab = Window:CreateTab("ðŸ¦´ðŸ”¨Bone Breaker", nil)
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "Xterm Break Your Bones",
   Content = "is Loading",
   Duration = 2,
   Image = nil,
})

local autoBuy = false
local autoBuyTask = nil

local AutoBuyCheckbox = MainTab:CreateToggle({
    Name = "Auto Buy Body Parts",
    CurrentValue = false,
    Flag = "AutoBuyBodyParts",
    Callback = function(state)
        autoBuy = state
        if autoBuy then
            if autoBuyTask and task.cancel then pcall(task.cancel, autoBuyTask) end
            autoBuyTask = task.spawn(function()
                while autoBuy do
                    for _, part in ipairs({"Head","Torso","Leg","Arm"}) do
                        pcall(function()
                            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer(part)
                        end)
                    end
                    task.wait(0.5)
                end
            end)
        else
            if autoBuyTask then pcall(task.cancel, autoBuyTask) autoBuyTask = nil end
        end
    end,
})

local Button = MainTab:CreateButton({
   Name = "Buy All Body Parts One Time",
   Callback = function()
       for _, part in ipairs({"Head","Torso","Leg","Arm"}) do
           pcall(function()
               game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer(part)
           end)
       end
   end,
})

local Button = MainTab:CreateButton({
   Name = "PurchaseNextRagdoll",
   Callback = function()
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseNextRagdoll"):FireServer()
   end,
})

local Button = MainTab:CreateButton({
   Name = "RefineRagdoll",
   Callback = function()
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("RefineRagdoll"):FireServer()
   end,
})

local Button = MainTab:CreateButton({
   Name = "Buy Head",
   Callback = function()
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Head")
   end,
})

local Button = MainTab:CreateButton({
   Name = "Buy Torso",
   Callback = function()
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Torso")
   end,
})

local Button = MainTab:CreateButton({
   Name = "Buy Leg",
   Callback = function()
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Leg")
   end,
})

local Button = MainTab:CreateButton({
   Name = "Buy Arm",
   Callback = function()
       game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Arm")
   end,
})

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local SPIN_MULTIPLIER = 40
local IMPULSE_INTERVAL = 0.1
local IMPULSE_STRENGTH = 1200
local ANGVEL_STRENGTH = 1000

local inputValue = 0
local spinSpeed = 0
local glitchedFlying = false
local spinConn = nil
local impulseTask = nil
local currentHRP = nil

local function getHRP(char)
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
end

local function clearPhysicsExtras(hrp)
    if not hrp then return end
    for _, c in ipairs(hrp:GetChildren()) do
        if c.Name == "__SPIN_ANGVEL__" or c.Name == "__SPIN_BODYVELOCITY__" then
            c:Destroy()
        end
    end
end

local function applyPhysicsImpulse(hrp)
    if not hrp or not hrp.Parent then return end
    if IMPULSE_STRENGTH and IMPULSE_STRENGTH > 0 then
        local bv = Instance.new("BodyVelocity")
        bv.Name = "__SPIN_BODYVELOCITY__"
        bv.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        local forward = hrp.CFrame.LookVector
        bv.Velocity = forward * IMPULSE_STRENGTH + Vector3.new(0, IMPULSE_STRENGTH * 0.18, 0)
        bv.P = 1250
        bv.Parent = hrp
        delay(0.12, function()
            if bv and bv.Parent then pcall(function() bv:Destroy() end) end
        end)
    end
    if ANGVEL_STRENGTH and ANGVEL_STRENGTH > 0 then
        local ang = Instance.new("AngularVelocity")
        ang.Name = "__SPIN_ANGVEL__"
        ang.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        local axis = Vector3.new(0,1,0) + Vector3.new((math.random()-0.5)*0.22, 0, (math.random()-0.5)*0.22)
        ang.AngularVelocity = axis.Unit * (ANGVEL_STRENGTH * ((spinSpeed/1000) + 0.6))
        ang.Parent = hrp
        delay(0.18, function()
            if ang and ang.Parent then pcall(function() ang:Destroy() end) end
        end)
    end
end

local function startCFrameSpin(hrp)
    if spinConn then return end
    spinConn = RunService.Stepped:Connect(function(_, dt)
        if not glitchedFlying or not hrp or not hrp.Parent then return end
        local degPerSec = (spinSpeed or 0) * SPIN_MULTIPLIER
        if degPerSec <= 0 then return end
        local rotateDeg = degPerSec * dt
        hrp.CFrame = hrp.CFrame * CFrame.Angles(0, math.rad(rotateDeg), 0)
    end)
end

local function stopGlitchedFly()
    glitchedFlying = false
    if spinConn then
        spinConn:Disconnect()
        spinConn = nil
    end
    if impulseTask then
        pcall(task.cancel, impulseTask)
        impulseTask = nil
    end
    if currentHRP then
        clearPhysicsExtras(currentHRP)
        currentHRP = nil
    end
end

local function startGlitchedFlyForCharacter(char)
    if not char then return end
    stopGlitchedFly()
    currentHRP = getHRP(char)
    if not currentHRP then
        currentHRP = char:WaitForChild("HumanoidRootPart", 2) or getHRP(char)
    end
    if not currentHRP then return end
    glitchedFlying = true
    startCFrameSpin(currentHRP)
    if IMPULSE_INTERVAL and IMPULSE_INTERVAL > 0 then
        impulseTask = task.spawn(function()
            while glitchedFlying do
                if currentHRP and currentHRP.Parent then
                    pcall(function()
                        applyPhysicsImpulse(currentHRP)
                    end)
                end
                task.wait(IMPULSE_INTERVAL)
            end
        end)
    end
end

local SpinInput = MainTab:CreateInput({
   Name = "Auto Farm(Break Your bones)",
   CurrentValue = "0",
   PlaceholderText = "Enter Number",
   RemoveTextAfterFocusLost = false,
   Flag = "SpinInput",
   Callback = function(Text)
       local val = tonumber(Text) or 0
       inputValue = val
       spinSpeed = inputValue
       if spinSpeed ~= 0 then
           local pl = LocalPlayer
           local char = pl and (pl.Character or pl.CharacterAdded and pl.CharacterAdded:Wait())
           if char then
               startGlitchedFlyForCharacter(char)
           end
       else
           stopGlitchedFly()
       end
   end,
})

LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.08)
    if currentHRP then
        clearPhysicsExtras(currentHRP)
    end
    currentHRP = nil
    if spinSpeed and spinSpeed ~= 0 then
        task.spawn(function()
            task.wait(5)
            if LocalPlayer.Character == char and spinSpeed and spinSpeed ~= 0 then
                startGlitchedFlyForCharacter(char)
            end
        end)
    end
end)

if game.BindToClose then
    game:BindToClose(function()
        stopGlitchedFly()
    end)
end
