
local success, redzlib = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()
end)

if not success or not redzlib then
    warn("Failed to load redzlib:", redzlib)
    return
end

print("redzlib loaded:", typeof(redzlib))

local Window = redzlib:MakeWindow({
    Title = "Xterm Break Bones",
    SubTitle = "by qx0_",
    SaveFolder = "Xterm_redzlib_config"
})

-- optional: minimize button (icon from your example)
pcall(function()
    Window:AddMinimizeButton({
        Button = { Image = "bone", BackgroundTransparency = 0 },
        Corner = { CornerRadius = UDim.new(35, 1) },
    })
end)

-- Protect SetTheme (some versions may not have it or expect different args)
pcall(function()
    if redzlib.SetTheme then
        redzlib:SetTheme("Dark")
    end
end)

-- Create tab and section
local Tab1 = Window:MakeTab({"ü¶¥üî®Bone Breaker", "bone"})
local Section = Tab1:AddSection({"Main"})

Window:Dialog({
    Title = "Xterm Break Your Bones",
    Text = "is Loaded",
    Options = {
        {"OK", function() end}
    }
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local autoBuy = false
local autoBuyTask = nil

local autoBuyRagdoll = false
local autoBuyRagdollTask = nil

local SPIN_MULTIPLIER = 40
local IMPULSE_INTERVAL = 0.1
local IMPULSE_STRENGTH = 1200
local ANGVEL_STRENGTH = 1000

local inputValue = 0
local spinSpeed = 0
local glitchedFlying = false
local spinConn = nil
local impulseTask = nil
local currentHRP = nil

local function getHRP(char)
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
end

local function clearPhysicsExtras(hrp)
    if not hrp then return end
    for _, c in ipairs(hrp:GetChildren()) do
        if c.Name == "__SPIN_ANGVEL__" or c.Name == "__SPIN_BODYVELOCITY__" then
            pcall(function() c:Destroy() end)
        end
    end
end

local function applyPhysicsImpulse(hrp)
    if not hrp or not hrp.Parent then return end
    if IMPULSE_STRENGTH and IMPULSE_STRENGTH > 0 then
        local bv = Instance.new("BodyVelocity")
        bv.Name = "__SPIN_BODYVELOCITY__"
        bv.MaxForce = Vector3.new(1e5, 1e5, 1e5)
        local forward = hrp.CFrame.LookVector
        bv.Velocity = forward * IMPULSE_STRENGTH + Vector3.new(0, IMPULSE_STRENGTH * 0.18, 0)
        bv.P = 1250
        bv.Parent = hrp
        delay(0.12, function()
            if bv and bv.Parent then pcall(function() bv:Destroy() end) end
        end)
    end
    if ANGVEL_STRENGTH and ANGVEL_STRENGTH > 0 then
        local ang = Instance.new("AngularVelocity")
        ang.Name = "__SPIN_ANGVEL__"
        ang.MaxTorque = Vector3.new(1e6, 1e6, 1e6)
        local axis = Vector3.new(0,1,0) + Vector3.new((math.random()-0.5)*0.22, 0, (math.random()-0.5)*0.22)
        ang.AngularVelocity = axis.Unit * (ANGVEL_STRENGTH * ((spinSpeed/1000) + 0.6))
        ang.Parent = hrp
        delay(0.18, function()
            if ang and ang.Parent then pcall(function() ang:Destroy() end) end
        end)
    end
end

local function startCFrameSpin(hrp)
    if spinConn then return end
    spinConn = RunService.Stepped:Connect(function(_, dt)
        if not glitchedFlying or not hrp or not hrp.Parent then return end
        local degPerSec = (spinSpeed or 0) * SPIN_MULTIPLIER
        if degPerSec <= 0 then return end
        local rotateDeg = degPerSec * dt
        hrp.CFrame = hrp.CFrame * CFrame.Angles(0, math.rad(rotateDeg), 0)
    end)
end

local function stopGlitchedFly()
    glitchedFlying = false
    if spinConn then
        spinConn:Disconnect()
        spinConn = nil
    end
    if impulseTask then
        pcall(task.cancel, impulseTask)
        impulseTask = nil
    end
    if currentHRP then
        clearPhysicsExtras(currentHRP)
        currentHRP = nil
    end
end

local function startGlitchedFlyForCharacter(char)
    if not char then return end
    stopGlitchedFly()
    currentHRP = getHRP(char)
    if not currentHRP then
        currentHRP = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart", 2) or getHRP(char)
    end
    if not currentHRP then return end
    glitchedFlying = true
    startCFrameSpin(currentHRP)
    if IMPULSE_INTERVAL and IMPULSE_INTERVAL > 0 then
        impulseTask = task.spawn(function()
            while glitchedFlying do
                if currentHRP and currentHRP.Parent then
                    pcall(function()
                        applyPhysicsImpulse(currentHRP)
                    end)
                end
                task.wait(IMPULSE_INTERVAL)
            end
        end)
    end
end

local ToggleAutoBuy = Tab1:AddToggle({
    Name = "Auto Buy Body Parts",
    Description = "Automatically purchases body parts",
    Default = false
})
ToggleAutoBuy:Callback(function(state)
    autoBuy = state
    if autoBuy then
        if autoBuyTask and task.cancel then pcall(task.cancel, autoBuyTask) end
        autoBuyTask = task.spawn(function()
            while autoBuy do
                for _, part in ipairs({"Head","Torso","Leg","Arm"}) do
                    pcall(function()
                        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer(part)
                    end)
                end
                task.wait(0.5)
            end
        end)
    else
        if autoBuyTask then pcall(task.cancel, autoBuyTask) autoBuyTask = nil end
    end
end)

local ToggleAutoBuyRagdoll = Tab1:AddToggle({
    Name = "Auto Buy Next Ragdoll",
    Description = "Automatically purchases next ragdoll",
    Default = false
})
ToggleAutoBuyRagdoll:Callback(function(state)
    autoBuyRagdoll = state
    if autoBuyRagdoll then
        if autoBuyRagdollTask and task.cancel then pcall(task.cancel, autoBuyRagdollTask) end
        autoBuyRagdollTask = task.spawn(function()
            while autoBuyRagdoll do
                pcall(function()
                    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseNextRagdoll"):FireServer()
                end)
                task.wait(0.5)
            end
        end)
    else
        if autoBuyRagdollTask then pcall(task.cancel, autoBuyRagdollTask) autoBuyRagdollTask = nil end
    end
end)

-- Ragdoll-Auswahl + Equip-Button (einf√ºgen nach deinen Tab1 Buttons)
local Ragdolls = {
    "Noodle","Mutant","Default","Worm","Star","Tadpole","Walker","Goofy","Wobbler","Doubles",
    "General","Spider","Chunk","Tower","Snake","Squid","Sergeant","Wall","Golem","Centaur",
    "Triplet","Slender","Tentacles","Centipede","Octagon","Hydra","Lanky"
}

local selectedRagdoll = Ragdolls[1] -- Standardwahl

local DropdownRagdoll = Tab1:AddDropdown({
    Name = "Ragdoll ausw√§hlen",
    Description = "W√§hle ein Ragdoll-Model zum equippen",
    Options = Ragdolls,
    Default = selectedRagdoll,
    Callback = function(val)
        selectedRagdoll = val
    end
})

Tab1:AddButton({"Equip Selected Ragdoll", function()
    if not selectedRagdoll or selectedRagdoll == "" then
        return
    end
    pcall(function()
        local remotes = ReplicatedStorage:WaitForChild("Remotes", 2)
        if remotes and remotes:FindFirstChild("EquipRagdoll") then
            remotes:WaitForChild("EquipRagdoll"):FireServer(selectedRagdoll)
        else
            warn("EquipRagdoll remote not found")
        end
    end)
end})

Tab1:AddButton({"Buy All Body Parts One Time", function()
    for _, part in ipairs({"Head","Torso","Leg","Arm"}) do
        pcall(function()
            ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer(part)
        end)
    end
end})

Tab1:AddButton({"PurchaseNextRagdoll", function()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseNextRagdoll"):FireServer()
    end)
end})

Tab1:AddButton({"RefineRagdoll", function()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("RefineRagdoll"):FireServer()
    end)
end})

Tab1:AddButton({"Buy Head", function()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Head")
    end)
end})

Tab1:AddButton({"Buy Torso", function()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Torso")
    end)
end})

Tab1:AddButton({"Buy Leg", function()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Leg")
    end)
end})

Tab1:AddButton({"Buy Arm", function()
    pcall(function()
        ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("PurchaseBoneUpgrade"):FireServer("Arm")
    end)
end})

local SpinSlider = Tab1:AddSlider({
    Name = "Auto Farm (Break Your bones)",
    Min = 0,
    Max = 88888,
    Increase = 1,
    Default = 0
})
SpinSlider:Callback(function(val)
    local valnum = tonumber(val) or 0
    inputValue = valnum
    spinSpeed = inputValue
    if spinSpeed ~= 0 then
        local pl = LocalPlayer
        local char = pl and (pl.Character or pl.CharacterAdded and pl.CharacterAdded:Wait())
        if char then
            startGlitchedFlyForCharacter(char)
        end
    else
        stopGlitchedFly()
    end
end)

LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.08)
    if currentHRP then
        clearPhysicsExtras(currentHRP)
    end
    currentHRP = nil
    if spinSpeed and spinSpeed ~= 0 then
        task.spawn(function()
            task.wait(5)
            if LocalPlayer.Character == char and spinSpeed and spinSpeed ~= 0 then
                startGlitchedFlyForCharacter(char)
            end
        end)
    end
end)

-- Sicherer BindToClose-Aufruf: pcall verhindert Client-Fehler
if game.BindToClose then
    pcall(function()
        game:BindToClose(function()
            stopGlitchedFly()
        end)
    end)
end
